# -*- coding: utf-8 -*-
"""test module."""

from __future__ import unicode_literals

import os
import unittest

from pyloco.util import load_pymod


def load_testclass(testpath):

    if not testpath:
        return None

    if isinstance(testpath, type):
        if issubclass(testpath, Test):
            return testpath
        raise UsageError("Not compatible test type: %s" % type(testpath))

    test_class = None

    _p = testpath.split("#", 1)

    if len(_p) == 2:
        testpath, fragment = [x.strip() for x in _p]

    else:
        fragment = ""

    if os.path.exists(testpath):

        mods = []

        if os.path.isfile(testpath):
            head, base = os.path.split(testpath)

            if base.endswith(".py"):
                mods.append(load_pymod(head, base[:-3]))

        candidates = {}

        for mod in mods:
            for name in dir(mod):
                if not name.startswith("_"):
                    obj = getattr(mod, name)

                    if (type(obj) == type(Test) and issubclass(obj, Test) and
                            (obj.__module__ is None or
                                not obj.__module__.startswith("pyloco."))):
                       candidates[name] = obj
        if candidates:
            if fragment:
                if hasattr(candidates, fragment):
                    test_class = getattr(candidates, fragment)

                else:
                    raise UsageError("No test is found with a fragment of "
                                     "'%s'." % fragment)
            elif len(candidates) == 1:
                test_class = candidates.popitem()[1]

            else:
                raise UsageError(
                    "More than one frame are found."
                    "Please add fragment to select one: %s" %
                    list(candidates.keys())
                )

        if test_class:
            setattr(test_class, "_path_", os.path.abspath(testpath))

        else:
            raise UsageError("Test class is not found. Please check path: %s" % testpath)

    return test_class


class TestCase(unittest.TestCase):
    """pyloco TestCase

"""

    def perform_test(self, task, *vargs, **kwargs):

        from pyloco.main import perform

        if vargs:
            return perform(task, list(vargs), **kwargs)

        else:
            return perform(task, **kwargs)

class TestSuite(unittest.TestSuite):

    def run(self, *vargs, **kwargs):

        from pyloco.task import Task
        from pyloco.parse import TestArgParser

        try:
            original_argparser = Task._argparser_
            Task._argparser_ = TestArgParser

            return super(TestSuite, self).run(*vargs, **kwargs)

        finally:
            Task._argparser_ = original_argparser

